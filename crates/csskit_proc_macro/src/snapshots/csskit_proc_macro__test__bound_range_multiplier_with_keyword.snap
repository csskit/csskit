---
source: crates/csskit_proc_macro/src/test.rs
expression: pretty
---
::css_parse::keyword_set!(FooKeywords { Auto : "auto", });
#[derive(
    ::csskit_derives::ToSpan,
    ::csskit_derives::ToCursors,
    Debug,
    Clone,
    PartialEq,
    Eq,
    PartialOrd,
    Ord,
    Hash
)]
#[cfg_attr(feature = "serde", derive(serde::Serialize), serde())]
enum Foo {
    Length(crate::Length, Option<crate::Length>),
    Auto(::css_parse::T![Ident]),
}
#[automatically_derived]
impl<'a> ::css_parse::Peek<'a> for Foo {
    fn peek(p: &::css_parse::Parser<'a>, c: ::css_lexer::Cursor) -> bool {
        use ::css_parse::Peek;
        <crate::Length>::peek(p, c) || <::css_parse::T![Ident]>::peek(p, c)
    }
}
#[automatically_derived]
impl<'a> ::css_parse::Parse<'a> for Foo {
    fn parse(p: &mut ::css_parse::Parser<'a>) -> ::css_parse::Result<Self> {
        use ::css_parse::{Parse, Peek};
        if let Some(keyword) = p.parse_if_peek::<FooKeywords>()? {
            use ::css_parse::Build;
            match keyword {
                FooKeywords::Auto(c) => {
                    return Ok(Self::Auto(<::css_parse::T![Ident]>::build(p, c)));
                }
            }
        }
        let combo0 = p.parse::<crate::Length>()?;
        let combo1 = p.parse_if_peek::<crate::Length>()?;
        Ok(Self::Length(combo0, combo1))
    }
}
