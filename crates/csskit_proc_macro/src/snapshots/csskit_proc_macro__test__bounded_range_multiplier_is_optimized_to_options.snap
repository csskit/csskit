---
source: crates/csskit_proc_macro/src/test.rs
expression: pretty
---
#[derive(
    ::csskit_derives::ToSpan,
    ::csskit_derives::ToCursors,
    Debug,
    Clone,
    PartialEq,
    Eq,
    PartialOrd,
    Ord,
    Hash
)]
#[cfg_attr(feature = "serde", derive(serde::Serialize), serde())]
struct Foo(
    pub crate::AnimateableFeature,
    pub Option<crate::AnimateableFeature>,
    pub Option<crate::AnimateableFeature>,
);
#[automatically_derived]
impl<'a> ::css_parse::Peek<'a> for Foo {
    fn peek(p: &::css_parse::Parser<'a>, c: ::css_lexer::Cursor) -> bool {
        use ::css_parse::Peek;
        <crate::AnimateableFeature>::peek(p, c)
    }
}
#[automatically_derived]
impl<'a> ::css_parse::Parse<'a> for Foo {
    fn parse(p: &mut ::css_parse::Parser<'a>) -> ::css_parse::Result<Self> {
        use ::css_parse::{Parse, Peek};
        let val0 = p.parse::<crate::AnimateableFeature>()?;
        let val1 = p.parse_if_peek::<crate::AnimateableFeature>()?;
        let val2 = p.parse_if_peek::<crate::AnimateableFeature>()?;
        Ok(Self(val0, val1, val2))
    }
}
