---
source: crates/csskit_proc_macro/src/test.rs
expression: pretty
---
::css_parse::keyword_set!(FooKeywords { Foo : "foo", Bar : "bar", Baz : "baz", });
#[derive(
    ::csskit_derives::IntoSpan,
    ::csskit_derives::ToCursors,
    Debug,
    Clone,
    PartialEq,
    Eq,
    PartialOrd,
    Ord,
    Hash
)]
#[cfg_attr(feature = "serde", derive(serde::Serialize), serde())]
struct Foo {
    pub foo: Option<::css_parse::T![Ident]>,
    pub bar: Option<::css_parse::T![Ident]>,
    pub baz: Option<::css_parse::T![Ident]>,
}
#[automatically_derived]
impl<'a> ::css_parse::Peek<'a> for Foo {
    fn peek(p: &::css_parse::Parser<'a>, c: ::css_lexer::Cursor) -> bool {
        use ::css_parse::Peek;
        <::css_parse::T![Ident]>::peek(p, c)
    }
}
#[automatically_derived]
impl<'a> ::css_parse::Parse<'a> for Foo {
    fn parse(p: &mut ::css_parse::Parser<'a>) -> ::css_parse::Result<Self> {
        use ::css_parse::{Parse, Peek};
        use ::css_parse::Build;
        let mut val = Self {
            foo: None,
            bar: None,
            baz: None,
        };
        while val.foo.is_none() || val.bar.is_none() || val.baz.is_none() {
            let c = p.peek_n(1);
            match p.parse_if_peek::<FooKeywords>()? {
                Some(FooKeywords::Foo(c)) => {
                    if val.foo.is_some() {
                        Err(::css_parse::diagnostics::Unexpected(c.into(), c.into()))?
                    }
                    val.foo = Some(<::css_parse::T![Ident]>::build(p, c));
                    continue;
                }
                Some(FooKeywords::Bar(c)) => {
                    if val.bar.is_some() {
                        Err(::css_parse::diagnostics::Unexpected(c.into(), c.into()))?
                    }
                    val.bar = Some(<::css_parse::T![Ident]>::build(p, c));
                    continue;
                }
                Some(FooKeywords::Baz(c)) => {
                    if val.baz.is_some() {
                        Err(::css_parse::diagnostics::Unexpected(c.into(), c.into()))?
                    }
                    val.baz = Some(<::css_parse::T![Ident]>::build(p, c));
                    continue;
                }
                None => {}
            }
            break;
        }
        if val.foo.is_none() && val.bar.is_none() && val.baz.is_none() {
            let c: ::css_lexer::Cursor = p.parse::<::css_parse::T![Any]>()?.into();
            Err(::css_parse::diagnostics::Unexpected(c.into(), c.into()))?
        }
        Ok(val)
    }
}
