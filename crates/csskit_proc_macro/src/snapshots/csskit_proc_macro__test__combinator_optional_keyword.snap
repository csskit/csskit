---
source: crates/csskit_proc_macro/src/test.rs
expression: pretty
---
::css_parse::keyword_set!(FooKeywords { Foo : "foo", });
#[derive(Debug, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[cfg_attr(feature = "serde", derive(serde::Serialize), serde())]
enum Foo {
    Foo(::css_parse::T![Ident]),
    Bar((Option<crate::Color>, ::css_parse::T![Ident])),
}
#[automatically_derived]
impl<'a> ::css_parse::Peek<'a> for Foo {
    fn peek(p: &::css_parse::Parser<'a>, c: ::css_lexer::Cursor) -> bool {
        use ::css_parse::Peek;
        <::css_parse::T![Ident]>::peek(p, c) || <crate::Color>::peek(p, c)
            || <::css_parse::T![Ident]>::peek(p, c)
    }
}
#[automatically_derived]
impl<'a> ::css_parse::Parse<'a> for Foo {
    fn parse(p: &mut ::css_parse::Parser<'a>) -> ::css_parse::Result<Self> {
        use ::css_parse::{Parse, Peek};
        if let Some(keyword) = p.parse_if_peek::<FooKeywords>()? {
            use ::css_parse::Build;
            match keyword {
                FooKeywords::Foo(c) => {
                    return Ok(Self::Foo(<::css_parse::T![Ident]>::build(p, c)));
                }
            }
        }
        let val0 = if p.peek::<crate::Color>() {
            let val = p.parse::<crate::Color>()?;
            Some(val)
        } else {
            None
        };
        let val1 = p.parse::<::css_parse::T![Ident]>()?;
        let c: ::css_lexer::Cursor = val1.into();
        if !p.eq_ignore_ascii_case(c, "bar") {
            Err(
                ::css_parse::diagnostics::UnexpectedIdent(
                    p.parse_str(c).into(),
                    c.into(),
                ),
            )?
        }
        let val = (val0, val1);
        Ok(Self::Bar(val))
    }
}
#[automatically_derived]
impl ::css_parse::ToCursors for Foo {
    fn to_cursors(&self, s: &mut impl ::css_parse::CursorSink) {
        match self {
            Self::Foo(inner) => {
                ::css_parse::ToCursors::to_cursors(inner, s);
            }
            Self::Bar(inner) => {
                if let Some(inner) = &inner.0 {
                    ::css_parse::ToCursors::to_cursors(inner, s);
                }
                ::css_parse::ToCursors::to_cursors(&inner.1, s);
            }
        }
    }
}
