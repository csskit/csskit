---
source: crates/csskit_proc_macro/src/test.rs
expression: pretty
---
#[derive(
    ::csskit_derives::ToSpan,
    ::csskit_derives::ToCursors,
    Debug,
    Clone,
    PartialEq,
    Eq,
    PartialOrd,
    Ord,
    Hash
)]
#[cfg_attr(feature = "serde", derive(serde::Serialize), serde())]
struct Foo {
    pub caret_color: Option<crate::CaretColorStyleValue>,
    pub caret_animation: Option<crate::CaretAnimationStyleValue>,
    pub caret_shape: Option<crate::CaretShapeStyleValue>,
}
#[automatically_derived]
impl<'a> ::css_parse::Peek<'a> for Foo {
    fn peek(p: &::css_parse::Parser<'a>, c: ::css_lexer::Cursor) -> bool {
        use ::css_parse::Peek;
        <crate::CaretColorStyleValue>::peek(p, c)
            || <crate::CaretAnimationStyleValue>::peek(p, c)
            || <crate::CaretShapeStyleValue>::peek(p, c)
    }
}
#[automatically_derived]
impl<'a> ::css_parse::Parse<'a> for Foo {
    fn parse(p: &mut ::css_parse::Parser<'a>) -> ::css_parse::Result<Self> {
        use ::css_parse::{Parse, Peek};
        use ::css_parse::Build;
        let mut val = Self {
            caret_color: None,
            caret_animation: None,
            caret_shape: None,
        };
        while val.caret_color.is_none() || val.caret_animation.is_none()
            || val.caret_shape.is_none()
        {
            let c = p.peek_n(1);
            if val.caret_color.is_none() && <crate::CaretColorStyleValue>::peek(p, c) {
                val.caret_color = Some(p.parse::<crate::CaretColorStyleValue>()?);
                continue;
            }
            if val.caret_animation.is_none()
                && <crate::CaretAnimationStyleValue>::peek(p, c)
            {
                val.caret_animation = Some(
                    p.parse::<crate::CaretAnimationStyleValue>()?,
                );
                continue;
            }
            if val.caret_shape.is_none() && <crate::CaretShapeStyleValue>::peek(p, c) {
                val.caret_shape = Some(p.parse::<crate::CaretShapeStyleValue>()?);
                continue;
            }
            break;
        }
        if val.caret_color.is_none() && val.caret_animation.is_none()
            && val.caret_shape.is_none()
        {
            let c: ::css_lexer::Cursor = p.parse::<::css_parse::T![Any]>()?.into();
            Err(::css_parse::diagnostics::Unexpected(c.into(), c.into()))?
        }
        Ok(val)
    }
}
