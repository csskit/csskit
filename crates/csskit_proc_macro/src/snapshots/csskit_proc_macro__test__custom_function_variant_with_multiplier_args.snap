---
source: crates/csskit_proc_macro/src/test.rs
expression: pretty
---
::css_parse::keyword_set!(FooKeywords { Normal : "normal", });
#[derive(
    ::csskit_derives::ToCursors,
    Debug,
    Clone,
    PartialEq,
    Eq,
    PartialOrd,
    Ord,
    Hash
)]
#[cfg_attr(feature = "serde", derive(serde::Serialize), serde())]
enum Foo<'a> {
    Normal(::css_parse::T![Ident]),
    StylesetFunction(
        ::css_parse::T![Function],
        ::bumpalo::collections::Vec<
            'a,
            (crate::FeatureValueName, Option<::css_parse::T![,]>),
        >,
        Option<::css_parse::T![')']>,
    ),
}
#[automatically_derived]
impl<'a> ::css_parse::Peek<'a> for Foo<'a> {
    fn peek(p: &::css_parse::Parser<'a>, c: ::css_lexer::Cursor) -> bool {
        use ::css_parse::Peek;
        <::css_parse::T![Ident]>::peek(p, c) || <::css_parse::T![Function]>::peek(p, c)
    }
}
#[automatically_derived]
impl<'a> ::css_parse::Parse<'a> for Foo<'a> {
    fn parse(p: &mut ::css_parse::Parser<'a>) -> ::css_parse::Result<Self> {
        use ::css_parse::{Parse, Peek};
        if let Some(keyword) = p.parse_if_peek::<FooKeywords>()? {
            use ::css_parse::Build;
            match keyword {
                FooKeywords::Normal(c) => {
                    return Ok(Self::Normal(<::css_parse::T![Ident]>::build(p, c)));
                }
            }
        }
        let function = p.parse::<::css_parse::T![Function]>()?;
        let c: css_lexer::Cursor = function.into();
        if !p.eq_ignore_ascii_case(c, "styleset") {
            return Err(
                ::css_parse::diagnostics::UnexpectedFunction(
                    p.parse_str(c).into(),
                    c.into(),
                ),
            )?;
        }
        let mut items = ::bumpalo::collections::Vec::new_in(p.bump());
        loop {
            let item = p.parse::<crate::FeatureValueName>()?;
            let comma = p.parse_if_peek::<::css_parse::T![,]>()?;
            items.push((item, comma));
            if comma.is_none() {
                break;
            }
        }
        let inner = items;
        let close = p.parse_if_peek::<::css_parse::T![')']>()?;
        Ok(Self::StylesetFunction(function, inner, close))
    }
}
