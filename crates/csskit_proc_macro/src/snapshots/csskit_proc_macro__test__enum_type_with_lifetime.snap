---
source: crates/csskit_proc_macro/src/test.rs
expression: pretty
---
#[derive(
    ::csskit_derives::IntoSpan,
    ::csskit_derives::ToCursors,
    Debug,
    Clone,
    PartialEq,
    Eq,
    PartialOrd,
    Ord,
    Hash
)]
#[cfg_attr(feature = "serde", derive(serde::Serialize), serde())]
enum Foo<'a> {
    Color(crate::Color),
    Image(crate::Image1D<'a>),
}
#[automatically_derived]
impl<'a> ::css_parse::Peek<'a> for Foo<'a> {
    fn peek(p: &::css_parse::Parser<'a>, c: ::css_lexer::Cursor) -> bool {
        use ::css_parse::Peek;
        <crate::Color>::peek(p, c) || <crate::Image1D>::peek(p, c)
    }
}
#[automatically_derived]
impl<'a> ::css_parse::Parse<'a> for Foo<'a> {
    fn parse(p: &mut ::css_parse::Parser<'a>) -> ::css_parse::Result<Self> {
        use ::css_parse::{Parse, Peek};
        let c = p.peek_n(1);
        if <crate::Color>::peek(p, c) {
            return Ok(Self::Color(p.parse::<crate::Color>()?));
        }
        let c = p.peek_n(1);
        if <crate::Image1D>::peek(p, c) {
            return Ok(Self::Image(p.parse::<crate::Image1D>()?));
        }
        let c: ::css_lexer::Cursor = p.parse::<::css_parse::T![Any]>()?.into();
        Err(::css_parse::diagnostics::Unexpected(c.into(), c.into()))?
    }
}
