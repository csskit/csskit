---
source: crates/csskit_proc_macro/src/test.rs
expression: pretty
snapshot_kind: text
---
::css_parse::keyword_set!(FooKeywords { Keyword : "keyword", });
#[derive(Debug, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[cfg_attr(feature = "serde", derive(serde::Serialize), serde())]
enum Foo {
    Keyword(::css_parse::T![Ident]),
    Literal1(crate::CSSInt),
    Literal1deg(::css_parse::T![Dimension]),
}
#[automatically_derived]
impl<'a> ::css_parse::Peek<'a> for Foo {
    fn peek(p: &::css_parse::Parser<'a>, c: ::css_lexer::Cursor) -> bool {
        use ::css_parse::Peek;
        <::css_parse::T![Ident]>::peek(p, c) || <crate::CSSInt>::peek(p, c)
            || <::css_parse::T![Dimension]>::peek(p, c)
    }
}
#[automatically_derived]
impl<'a> ::css_parse::Parse<'a> for Foo {
    fn parse(p: &mut ::css_parse::Parser<'a>) -> ::css_parse::Result<Self> {
        use ::css_parse::{Parse, Peek};
        if let Some(keyword) = p.parse_if_peek::<FooKeywords>()? {
            use ::css_parse::Build;
            match keyword {
                FooKeywords::Keyword(c) => {
                    return Ok(Self::Keyword(<::css_parse::T![Ident]>::build(p, c)));
                }
            }
        }
        if let Some(tk) = p.parse_if_peek::<crate::CSSInt>()? {
            match tk.into() {
                1i32 => {
                    return Ok(Self::Literal1(tk));
                }
                _ => {}
            }
        }
        if let Some(tk) = p.parse_if_peek::<::css_parse::T![Dimension]>()? {
            match tk.into() {
                (1f32, ::css_lexer::DimensionUnit::Deg) => {
                    return Ok(Self::Literal1deg(tk));
                }
                _ => {}
            }
        }
        let c: ::css_lexer::Cursor = p.parse::<::css_parse::T![Any]>()?.into();
        Err(::css_parse::diagnostics::Unexpected(c.into(), c.into()))?
    }
}
#[automatically_derived]
impl ::css_parse::ToCursors for Foo {
    fn to_cursors(&self, s: &mut impl ::css_parse::CursorSink) {
        match self {
            Self::Keyword(inner) => {
                s.append(inner.into());
            }
            Self::Literal1(inner) => {
                s.append(inner.into());
            }
            Self::Literal1deg(inner) => {
                s.append(inner.into());
            }
        }
    }
}
