---
source: crates/csskit_proc_macro/src/test.rs
expression: pretty
---
::css_parse::keyword_set!(
    pub enum FooKeywords { Black : "black", White : "white", LineThrough :
    "line-through", Pink : "pink", }
);
#[derive(
    ::csskit_derives::ToSpan,
    ::csskit_derives::ToCursors,
    Debug,
    Clone,
    PartialEq,
    Eq,
    PartialOrd,
    Ord,
    Hash
)]
#[cfg_attr(feature = "serde", derive(serde::Serialize), serde())]
enum Foo {
    Black(::css_parse::T![Ident]),
    White(::css_parse::T![Ident]),
    LineThrough(::css_parse::T![Ident]),
    Pink(::css_parse::T![Ident]),
}
#[automatically_derived]
impl<'a> ::css_parse::Peek<'a> for Foo {
    fn peek(p: &::css_parse::Parser<'a>, c: ::css_lexer::Cursor) -> bool {
        use ::css_parse::Peek;
        <::css_parse::T![Ident]>::peek(p, c)
    }
}
#[automatically_derived]
impl<'a> ::css_parse::Parse<'a> for Foo {
    fn parse(p: &mut ::css_parse::Parser<'a>) -> ::css_parse::Result<Self> {
        use ::css_parse::{Parse, Peek};
        match p.parse_if_peek::<FooKeywords>()? {
            Some(FooKeywords::Black(ident)) => {
                return Ok(Self::Black(ident));
            }
            Some(FooKeywords::White(ident)) => {
                return Ok(Self::White(ident));
            }
            Some(FooKeywords::LineThrough(ident)) => {
                return Ok(Self::LineThrough(ident));
            }
            Some(FooKeywords::Pink(ident)) => {
                return Ok(Self::Pink(ident));
            }
            None => {}
        }
        let c: ::css_lexer::Cursor = p.parse::<::css_parse::T![Any]>()?.into();
        Err(::css_parse::diagnostics::UnexpectedIdent(p.parse_str(c).into(), c.into()))?
    }
}
