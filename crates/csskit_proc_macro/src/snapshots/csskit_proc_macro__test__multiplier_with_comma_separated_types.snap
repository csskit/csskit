---
source: crates/csskit_proc_macro/src/test.rs
expression: pretty
---
::css_parse::keyword_set!(pub enum FooKeywords { Foo : "foo", });
#[derive(
    ::csskit_derives::ToSpan,
    ::csskit_derives::ToCursors,
    Debug,
    Clone,
    PartialEq,
    Eq,
    PartialOrd,
    Ord,
    Hash
)]
#[cfg_attr(feature = "serde", derive(serde::Serialize), serde())]
enum SingleFoo {
    Foo(::css_parse::T![Ident]),
    Bar(crate::Bar),
}
#[automatically_derived]
impl<'a> ::css_parse::Peek<'a> for SingleFoo {
    fn peek(p: &::css_parse::Parser<'a>, c: ::css_lexer::Cursor) -> bool {
        use ::css_parse::Peek;
        <::css_parse::T![Ident]>::peek(p, c) || <crate::Bar>::peek(p, c)
    }
}
#[automatically_derived]
impl<'a> ::css_parse::Parse<'a> for SingleFoo {
    fn parse(p: &mut ::css_parse::Parser<'a>) -> ::css_parse::Result<Self> {
        use ::css_parse::{Parse, Peek};
        match p.parse_if_peek::<FooKeywords>()? {
            Some(FooKeywords::Foo(ident)) => {
                return Ok(Self::Foo(ident));
            }
            None => {}
        };
        Ok(Self::Bar(p.parse::<crate::Bar>()?))
    }
}
#[derive(
    ::csskit_derives::ToSpan,
    ::csskit_derives::ToCursors,
    Debug,
    Clone,
    PartialEq,
    Eq,
    PartialOrd,
    Ord,
    Hash
)]
#[cfg_attr(feature = "serde", derive(serde::Serialize), serde())]
struct Foo<'a>(pub ::css_parse::CommaSeparated<'a, crate::SingleFoo>);
#[automatically_derived]
impl<'a> ::css_parse::Peek<'a> for Foo<'a> {
    fn peek(p: &::css_parse::Parser<'a>, c: ::css_lexer::Cursor) -> bool {
        use ::css_parse::Peek;
        <crate::SingleFoo>::peek(p, c)
    }
}
#[automatically_derived]
impl<'a> ::css_parse::Parse<'a> for Foo<'a> {
    fn parse(p: &mut ::css_parse::Parser<'a>) -> ::css_parse::Result<Self> {
        use ::css_parse::{Parse, Peek};
        return Ok(Self(p.parse::<::css_parse::CommaSeparated<'a, crate::SingleFoo>>()?));
    }
}
