---
source: crates/csskit_proc_macro/src/test.rs
expression: pretty
---
::css_parse::keyword_set!(pub enum FooKeywords { Foo : "foo", });
#[derive(
    ::csskit_derives::ToSpan,
    ::csskit_derives::ToCursors,
    Debug,
    Clone,
    PartialEq,
    Eq,
    PartialOrd,
    Ord,
    Hash
)]
#[cfg_attr(feature = "serde", derive(serde::Serialize), serde())]
enum Foo<'a> {
    Foo(::css_parse::T![Ident]),
    Lengths(::bumpalo::collections::Vec<'a, crate::Length>),
}
#[automatically_derived]
impl<'a> ::css_parse::Peek<'a> for Foo<'a> {
    fn peek(p: &::css_parse::Parser<'a>, c: ::css_lexer::Cursor) -> bool {
        use ::css_parse::Peek;
        <::css_parse::T![Ident]>::peek(p, c) || <crate::Length>::peek(p, c)
    }
}
#[automatically_derived]
impl<'a> ::css_parse::Parse<'a> for Foo<'a> {
    fn parse(p: &mut ::css_parse::Parser<'a>) -> ::css_parse::Result<Self> {
        use ::css_parse::{Parse, Peek};
        match p.parse_if_peek::<FooKeywords>()? {
            Some(FooKeywords::Foo(ident)) => {
                return Ok(Self::Foo(ident));
            }
            None => {}
        }
        let mut items = ::bumpalo::collections::Vec::new_in(p.bump());
        loop {
            items.push(p.parse::<crate::Length>()?);
            if !p.peek::<crate::Length>() {
                break;
            }
        };
        Ok(Self::Lengths(items))
    }
}
