---
source: crates/hdx_proc_macro/src/test.rs
expression: pretty
---
#[derive(Debug, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[cfg_attr(feature = "serde", derive(serde::Serialize), serde())]
struct Foo(
    pub Option<types::CaretColor>,
    pub Option<types::CaretAnimation>,
    pub Option<types::CaretShape>,
);
#[automatically_derived]
impl<'a> ::hdx_parser::Peek<'a> for Foo {
    fn peek(p: &::hdx_parser::Parser<'a>) -> bool {
        use ::hdx_parser::Peek;
        p.peek::<types::CaretColor>() || p.peek::<types::CaretAnimation>()
            || p.peek::<types::CaretShape>()
    }
}
#[automatically_derived]
impl<'a> ::hdx_parser::Parse<'a> for Foo {
    fn parse(p: &mut ::hdx_parser::Parser<'a>) -> ::hdx_parser::Result<Self> {
        use ::hdx_parser::Parse;
        let mut val0 = None;
        let mut val1 = None;
        let mut val2 = None;
        loop {
            if val0.is_none() && p.peek::<types::CaretColor>() {
                val0 = Some(p.parse::<types::CaretColor>()?);
                continue;
            }
            if val1.is_none() && p.peek::<types::CaretAnimation>() {
                val1 = Some(p.parse::<types::CaretAnimation>()?);
                continue;
            }
            if val2.is_none() && p.peek::<types::CaretShape>() {
                val2 = Some(p.parse::<types::CaretShape>()?);
                continue;
            }
            if val0.is_none() && val1.is_none() && val2.is_none() {
                let c: ::hdx_lexer::Cursor = p.parse::<::hdx_parser::T![Any]>()?.into();
                Err(::hdx_parser::diagnostics::Unexpected(c.into(), c.into()))?
            } else {
                return Ok(Self(val0, val1, val2));
            }
        }
    }
}
#[automatically_derived]
impl<'a> ::hdx_parser::ToCursors<'a> for Foo {
    fn to_cursors(&self, s: &mut ::hdx_parser::CursorStream<'a>) {
        if let Some(inner) = &self.0 {
            ::hdx_parser::ToCursors::to_cursors(inner, s);
        }
        if let Some(inner) = &self.1 {
            ::hdx_parser::ToCursors::to_cursors(inner, s);
        }
        if let Some(inner) = &self.2 {
            ::hdx_parser::ToCursors::to_cursors(inner, s);
        }
    }
}
