---
source: crates/hdx_proc_macro/src/test.rs
expression: pretty
---
#[derive(Debug, PartialEq, Clone, Hash)]
#[cfg_attr(feature = "serde", derive(serde::Serialize), serde())]
enum Foo {
    FitContent,
    FitContentFunction(types::LengthPercentage),
}
#[automatically_derived]
impl<'a> ::hdx_parser::Peek<'a> for Foo {
    fn peek(parser: &::hdx_parser::Parser<'a>) -> Option<::hdx_lexer::Token> {
        use ::hdx_parser::Peek;
        parser
            .peek::<::hdx_parser::token::Ident>()
            .or_else(|| parser.peek::<::hdx_parser::token::Function>())
    }
}
#[automatically_derived]
impl<'a> ::hdx_parser::Parse<'a> for Foo {
    fn parse(parser: &mut ::hdx_parser::Parser<'a>) -> ::hdx_parser::Result<Self> {
        use ::hdx_parser::Parse;
        if let Some(token) = parser.peek::<::hdx_parser::token::Ident>() {
            match parser.parse_atom_lower(token) {
                ::hdx_atom::atom!("fit-content") => {
                    parser.hop(token);
                    return Ok(Self::FitContent);
                }
                atom => {}
            }
        }
        let token = *parser.parse::<::hdx_parser::token::Function>()?;
        let atom = parser.parse_atom_lower(token);
        if atom != ::hdx_atom::atom!("fit-content") {
            return Err(
                ::hdx_parser::diagnostics::UnexpectedFunction(atom, token.span()),
            )?;
        }
        let start = parser.offset();
        let val = parser.parse::<types::LengthPercentage>()?;
        let valf32: f32 = val.into();
        if 0f32 > valf32 {
            return Err(
                ::hdx_parser::diagnostics::NumberTooSmall(
                    0f32,
                    ::hdx_lexer::Span::new(start, parser.offset()),
                ),
            )?;
        }
        Ok(Self::FitContentFunction(val))
    }
}
#[automatically_derived]
impl<'a> ::hdx_writer::WriteCss<'a> for Foo {
    fn write_css<W: ::hdx_writer::CssWriter>(
        &self,
        sink: &mut W,
    ) -> ::hdx_writer::Result {
        use ::hdx_writer::WriteCss;
        match self {
            Self::FitContent => {
                ::hdx_atom::atom!("fit-content").write_css(sink)?;
            }
            Self::FitContentFunction(inner) => {
                ::hdx_atom::atom!("fit-content").write_css(sink)?;
                sink.write_char('(')?;
                inner.write_css(sink)?;
                sink.write_char(')')?;
            }
        }
        Ok(())
    }
}
