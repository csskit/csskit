---
source: crates/hdx_proc_macro/src/test.rs
expression: pretty
---
::css_parse::keyword_set!(FooKeywords { Normal : "normal", });
#[derive(Debug, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[cfg_attr(feature = "serde", derive(serde::Serialize), serde())]
enum Foo<'a> {
    Normal(::css_parse::T![Ident]),
    StylesetFunction(
        ::css_parse::T![Function],
        ::bumpalo::collections::Vec<
            'a,
            (types::FeatureValueName, Option<::css_parse::T![,]>),
        >,
        Option<::css_parse::T![')']>,
    ),
}
#[automatically_derived]
impl<'a> ::css_parse::Peek<'a> for Foo<'a> {
    fn peek(p: &::css_parse::Parser<'a>, c: ::css_lexer::Cursor) -> bool {
        use ::css_parse::Peek;
        <::css_parse::T![Ident]>::peek(p, c) || <::css_parse::T![Function]>::peek(p, c)
    }
}
#[automatically_derived]
impl<'a> ::css_parse::Parse<'a> for Foo<'a> {
    fn parse(p: &mut ::css_parse::Parser<'a>) -> ::css_parse::Result<Self> {
        use ::css_parse::{Parse, Peek};
        if let Some(keyword) = p.parse_if_peek::<FooKeywords>()? {
            use ::css_parse::Build;
            match keyword {
                FooKeywords::Normal(c) => {
                    return Ok(Self::Normal(<::css_parse::T![Ident]>::build(p, c)));
                }
            }
        }
        let function = p.parse::<::css_parse::T![Function]>()?;
        let c: css_lexer::Cursor = function.into();
        if !p.eq_ignore_ascii_case(c, "styleset") {
            return Err(
                ::css_parse::diagnostics::UnexpectedFunction(
                    p.parse_str(c).into(),
                    c.into(),
                ),
            )?;
        }
        let mut val = ::bumpalo::collections::Vec::new_in(p.bump());
        loop {
            let item = p.parse::<types::FeatureValueName>()?;
            let comma = p.parse_if_peek::<::css_parse::T![,]>()?;
            val.push((item, comma));
            if comma.is_none() {
                break;
            }
        }
        let close = p.parse_if_peek::<::css_parse::T![')']>()?;
        Ok(Self::StylesetFunction(function, val, close))
    }
}
#[automatically_derived]
impl<'a> ::css_parse::ToCursors for Foo<'a> {
    fn to_cursors(&self, s: &mut impl ::css_parse::CursorSink) {
        match self {
            Self::Normal(inner) => {
                s.append(inner.into());
            }
            Self::StylesetFunction(function, val, close) => {
                s.append(function.into());
                for item in val {
                    let (item, comma) = item;
                    ::css_parse::ToCursors::to_cursors(item, s);
                    if let Some(comma) = comma {
                        s.append(comma.into());
                    }
                }
                if let Some(close) = close {
                    s.append(close.into());
                }
            }
        }
    }
}
