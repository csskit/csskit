---
source: crates/hdx_proc_macro/src/test.rs
expression: pretty
---
::css_parse::keyword_set!(FooKeywords { None : "none", });
#[derive(Debug, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[cfg_attr(feature = "serde", derive(serde::Serialize), serde())]
enum Foo {
    None(::css_parse::T![Ident]),
    LengthPercentage(types::LengthPercentage),
}
#[automatically_derived]
impl<'a> ::css_parse::Peek<'a> for Foo {
    fn peek(p: &::css_parse::Parser<'a>, c: ::css_lexer::Cursor) -> bool {
        use ::css_parse::Peek;
        p.peek::<::css_parse::T![Ident]>() || p.peek::<types::LengthPercentage>()
    }
}
#[automatically_derived]
impl<'a> ::css_parse::Parse<'a> for Foo {
    fn parse(p: &mut ::css_parse::Parser<'a>) -> ::css_parse::Result<Self> {
        use ::css_parse::Parse;
        if p.peek::<::css_parse::T![Ident]>() {
            let c = p.peek_n(1);
            let keywords = p.parse::<FooKeywords>();
            match keywords {
                Ok(FooKeywords::None(_)) => {
                    return Ok(Self::None(p.parse::<::css_parse::T![Ident]>()?));
                }
                Err(_) => {}
            }
        }
        let start = p.offset();
        let val = p.parse::<types::LengthPercentage>()?;
        let valf32: f32 = val.into();
        if 0f32 > valf32 {
            return Err(
                ::css_parse::diagnostics::NumberTooSmall(
                    0f32,
                    ::css_lexer::Span::new(start, p.offset()),
                ),
            )?;
        }
        Ok(Self::LengthPercentage(val))
    }
}
#[automatically_derived]
impl ::css_parse::ToCursors for Foo {
    fn to_cursors(&self, s: &mut impl ::css_parse::CursorSink) {
        match self {
            Self::None(inner) => {
                s.append(inner.into());
            }
            Self::LengthPercentage(inner) => {
                ::css_parse::ToCursors::to_cursors(inner, s);
            }
        }
    }
}
