---
source: crates/hdx_proc_macro/src/test.rs
expression: pretty
---
#[derive(Debug, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[cfg_attr(feature = "serde", derive(serde::Serialize), serde())]
enum Foo<'a> {
    Color(types::Color),
    Image(types::Image1D<'a>),
}
#[automatically_derived]
impl<'a> ::css_parse::Peek<'a> for Foo<'a> {
    fn peek(p: &::css_parse::Parser<'a>, c: ::css_lexer::Cursor) -> bool {
        use ::css_parse::Peek;
        p.peek::<types::Color>() || p.peek::<types::Image1D>()
    }
}
#[automatically_derived]
impl<'a> ::css_parse::Parse<'a> for Foo<'a> {
    fn parse(p: &mut ::css_parse::Parser<'a>) -> ::css_parse::Result<Self> {
        use ::css_parse::Parse;
        if p.peek::<types::Color>() {
            let val = p.parse::<types::Color>()?;
            return Ok(Self::Color(val));
        }
        if p.peek::<types::Image1D>() {
            let val = p.parse::<types::Image1D>()?;
            return Ok(Self::Image(val));
        }
        let c: ::css_lexer::Cursor = p.parse::<::css_parse::T![Any]>()?.into();
        Err(::css_parse::diagnostics::Unexpected(c.into(), c.into()))?
    }
}
#[automatically_derived]
impl<'a> ::css_parse::ToCursors for Foo<'a> {
    fn to_cursors(&self, s: &mut impl ::css_parse::CursorSink) {
        match self {
            Self::Color(inner) => {
                ::css_parse::ToCursors::to_cursors(inner, s);
            }
            Self::Image(inner) => {
                ::css_parse::ToCursors::to_cursors(inner, s);
            }
        }
    }
}
