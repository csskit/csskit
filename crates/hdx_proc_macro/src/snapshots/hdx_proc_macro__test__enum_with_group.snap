---
source: crates/hdx_proc_macro/src/test.rs
expression: pretty
---
#[derive(Debug, PartialEq, Clone, Hash)]
#[cfg_attr(feature = "serde", derive(serde::Serialize), serde())]
enum Foo {
    DisplayOutsideDisplayInside(
        Option<types::DisplayOutside>,
        Option<types::DisplayInside>,
    ),
    DisplayListitem(types::DisplayListitem),
}
#[automatically_derived]
impl<'a> ::hdx_parser::Peek<'a> for Foo {
    fn peek(parser: &::hdx_parser::Parser<'a>) -> Option<::hdx_lexer::Token> {
        use ::hdx_parser::Peek;
        parser
            .peek::<types::DisplayOutside>()
            .or_else(|| parser.peek::<types::DisplayInside>())
            .or_else(|| parser.peek::<types::DisplayListitem>())
    }
}
#[automatically_derived]
impl<'a> ::hdx_parser::Parse<'a> for Foo {
    fn parse(parser: &mut ::hdx_parser::Parser<'a>) -> ::hdx_parser::Result<Self> {
        use ::hdx_parser::Parse;
        if parser
            .peek::<types::DisplayOutside>()
            .or_else(|| parser.peek::<types::DisplayInside>())
            .is_some()
        {
            let mut val0 = None;
            let mut val1 = None;
            loop {
                if val0.is_none() && parser.peek::<types::DisplayOutside>().is_some() {
                    val0 = Some(parser.parse::<types::DisplayOutside>()?);
                    continue;
                }
                if val1.is_none() && parser.peek::<types::DisplayInside>().is_some() {
                    val1 = Some(parser.parse::<types::DisplayInside>()?);
                    continue;
                }
                if val0.is_none() && val1.is_none() {
                    let token = parser.peek::<::hdx_parser::token::Any>().unwrap();
                    Err(::hdx_parser::diagnostics::Unexpected(token, token.span()))?
                } else {
                    break;
                }
            };
            return Ok(Self::DisplayOutsideDisplayInside(val0, val1));
        }
        if parser.peek::<types::DisplayListitem>().is_some() {
            let val = parser.parse::<types::DisplayListitem>()?;
            return Ok(Self::DisplayListitem(val));
        }
        let token = parser.peek::<::hdx_parser::token::Any>().unwrap();
        Err(::hdx_parser::diagnostics::Unexpected(token, token.span()))?
    }
}
#[automatically_derived]
impl<'a> ::hdx_writer::WriteCss<'a> for Foo {
    fn write_css<W: ::hdx_writer::CssWriter>(
        &self,
        sink: &mut W,
    ) -> ::hdx_writer::Result {
        use ::hdx_writer::WriteCss;
        match self {
            Self::DisplayOutsideDisplayInside(inner0, inner1) => {
                inner0.write_css(sink)?;
                sink.write_char(' ')?;
                inner1.write_css(sink)?;
            }
            Self::DisplayListitem(inner) => {
                inner.write_css(sink)?;
            }
        }
        Ok(())
    }
}
