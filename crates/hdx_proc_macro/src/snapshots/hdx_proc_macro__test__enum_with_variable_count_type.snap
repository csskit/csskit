---
source: crates/hdx_proc_macro/src/test.rs
expression: pretty
---
#[derive(Debug, PartialEq, Clone, Hash)]
#[cfg_attr(feature = "serde", derive(serde::Serialize), serde())]
enum Foo {
    Auto,
    AnimateableFeatures(smallvec::SmallVec<[types::AnimateableFeature; 1usize]>),
}
#[automatically_derived]
impl<'a> ::hdx_parser::Peek<'a> for Foo {
    fn peek(parser: &::hdx_parser::Parser<'a>) -> Option<::hdx_lexer::Token> {
        use ::hdx_parser::Peek;
        parser
            .peek::<::hdx_parser::token::Ident>()
            .or_else(|| parser.peek::<types::AnimateableFeature>())
    }
}
#[automatically_derived]
impl<'a> ::hdx_parser::Parse<'a> for Foo {
    fn parse(parser: &mut ::hdx_parser::Parser<'a>) -> ::hdx_parser::Result<Self> {
        use ::hdx_parser::Parse;
        if let Some(token) = parser.peek::<::hdx_parser::token::Ident>() {
            match parser.parse_atom_lower(token) {
                ::hdx_atom::atom!("auto") => {
                    return Ok(Self::Auto);
                }
                atom => {}
            }
        }
        let mut val = ::smallvec::smallvec![];
        loop {
            let item = parser.parse::<types::AnimateableFeature>()?;
            val.push(item);
            if let Some(token) = parser.peek::<::hdx_parser::Token![,]>() {
                parser.hop(token);
            } else {
                break;
            }
        };
        Ok(Self::AnimateableFeatures(val))
    }
}
#[automatically_derived]
impl<'a> ::hdx_writer::WriteCss<'a> for Foo {
    fn write_css<W: ::hdx_writer::CssWriter>(
        &self,
        sink: &mut W,
    ) -> ::hdx_writer::Result {
        use ::hdx_writer::WriteCss;
        match self {
            Self::Auto => {
                ::hdx_atom::atom!("auto").write_css(sink)?;
            }
            Self::AnimateableFeatures(inner) => {
                let mut iter = inner.iter().peekable();
                while let Some(item) = iter.next() {
                    item.write_css(sink)?;
                    if iter.peek().is_some() {
                        ::hdx_writer::write_css!(sink, ',', ());
                    }
                }
            }
        }
        Ok(())
    }
}
